group 'microservice-kubernetes-demo'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories{
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
        classpath("se.transmode.gradle:gradle-docker:1.2")
    }
}

jar{
    manifest.attributes("Main-Class": "com.ef.Application")
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.4.3.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:1.4.3.RELEASE")
    compile("org.postgresql:postgresql")
    compile("com.google.guava:guava:11.0.2")

    testCompile("junit:junit:4.11")
    testCompile('org.springframework.boot:spring-boot-starter-test:1.4.3.RELEASE')
    testCompile("org.assertj:assertj-core:1.0.0")
}

task dockerize(type: Docker, dependsOn: build) {
    applicationName = "userservice"
    push = false
    dockerfile = file("Dockerfile")
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task createDeploymentTest(type: Exec){
    commandLine 'kubectl', 'run', 'user-service', '--image', 'microservice-kubernetes-demo/userservice:1.0-SNAPSHOT', '--namespace', 'test', '--port', '8083'
}

task createDeploymentProduction(type: Exec){
    commandLine 'kubectl', 'run', 'user-service', '--image', 'microservice-kubernetes-demo/userservice:1.0-SNAPSHOT', '--namespace', 'production', '--port', '8083'
}

task createDeployment(dependsOn: [createDeploymentTest, createDeploymentProduction])

task createServiceTest(type: Exec){
    commandLine 'kubectl', 'expose', 'deployment', 'user-service', '--namespace', 'test'
}

task createServiceProduction(type: Exec){
    commandLine 'kubectl', 'expose', 'deployment', 'user-service', '--namespace', 'production'
}

task createService(dependsOn: [createServiceTest, createServiceProduction])

createService.mustRunAfter createDeployment

task deployToKubernetes(dependsOn: [createDeployment, createService])

task deleteDeploymentTest(type: Exec){
    commandLine 'kubectl', 'delete', 'deployment', 'user-service', '--namespace', 'test'
}

task deleteDeploymentProduction(type: Exec){
    commandLine 'kubectl', 'delete', 'deployment', 'user-service', '--namespace', 'production'
}

task deleteServiceTest(type: Exec){
    commandLine 'kubectl', 'delete', 'service', 'user-service', '--namespace', 'test'
}

task deleteServiceProduction(type: Exec){
    commandLine 'kubectl', 'delete', 'service', 'user-service', '--namespace', 'production'
}

task deleteService(dependsOn: [deleteServiceProduction, deleteServiceTest])

task deleteDeployment(dependsOn: [deleteDeploymentTest, deleteDeploymentProduction])

deleteDeployment.mustRunAfter deleteService

task undeployFromKubernetes(dependsOn: [deleteService, deleteDeployment])