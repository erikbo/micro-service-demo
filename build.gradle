group 'microservice-kubernetes-demo'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task deployUserService(dependsOn: ':user-service:deployToKubernetes')
task deployRssService(dependsOn: ':rss-service:deployToKubernetes')
task deployOrchestratorService(dependsOn: ':orchestrator-service:deployToKubernetes')

task createDatabaseDeploymentTest(type: Exec) {
    //kubectl run some-postgres --port 5432 --image=postgres --env="POSTGRES_DB=some-postgres" --env "POSTGRES_PASSWORD=pw"
    commandLine 'kubectl', 'run', 'some-postgres', '--namespace', 'test', '--port', '5432', '--image', 'postgres', '--env', '"POSTGRES_DB=some-postgres"', '--env', '"POSTGRES_PASSWORD=pw"'
}

task createDatabaseServiceTest(type: Exec) {
    commandLine 'kubectl', 'expose', 'deployment', 'some-postgres', '--namespace', 'test'
}

createDatabaseServiceTest.mustRunAfter createDatabaseDeploymentTest

task createDatabaseDeploymentProduction(type: Exec) {
    //kubectl run some-postgres --port 5432 --image=postgres --env="POSTGRES_DB=some-postgres" --env "POSTGRES_PASSWORD=pw"
    commandLine 'kubectl', 'run', 'some-postgres', '--namespace', 'production', '--port', '5432', '--image', 'postgres', '--env', '"POSTGRES_DB=some-postgres"', '--env', '"POSTGRES_PASSWORD=pw"'
}

task createDatabaseServiceProduction(type: Exec) {
    commandLine 'kubectl', 'expose', 'deployment', 'some-postgres', '--namespace', 'production'
}

createDatabaseServiceProduction.mustRunAfter createDatabaseDeploymentProduction

task deployDatabaseToTest(dependsOn: [createDatabaseDeploymentTest, createDatabaseServiceTest])
task deployDatabaseToProduction(dependsOn: [createDatabaseDeploymentProduction, createDatabaseServiceProduction])

task deployDatabase(dependsOn: [deployDatabaseToTest, deployDatabaseToProduction])

deployUserService.mustRunAfter deployDatabase
deployRssService.mustRunAfter deployUserService
deployOrchestratorService.mustRunAfter deployRssService

task deployToKubernetes(dependsOn: [deployUserService, deployRssService, deployOrchestratorService, deployDatabase])

task deleteTestDatabaseDeployment(type: Exec){
    commandLine 'kubectl', 'delete', 'deployment', 'some-postgres', '--namespace', 'test'
}
task deleteTestDatabaseService(type: Exec) {
    commandLine 'kubectl', 'delete', 'service', 'some-postgres', '--namespace', 'test'
}

task deleteProductionDatabaseDeployment(type: Exec){
    commandLine 'kubectl', 'delete', 'deployment', 'some-postgres', '--namespace', 'production'
}
task deleteProductionDatabaseService(type: Exec) {
    commandLine 'kubectl', 'delete', 'service', 'some-postgres', '--namespace', 'production'
}

task undeployDatabaseTest(dependsOn: [deleteTestDatabaseDeployment, deleteTestDatabaseService])
task undeployDatabaseProduction(dependsOn: [deleteProductionDatabaseDeployment, deleteProductionDatabaseService])

task undeployDatabase(dependsOn: [undeployDatabaseTest, undeployDatabaseProduction])

task undeployUserService(dependsOn: ':user-service:undeployFromKubernetes')
task unddeployRssService(dependsOn: ':rss-service:undeployFromKubernetes')
task undeployOrchestratorService(dependsOn: ':orchestrator-service:undeployFromKubernetes')

task undeployFromKubernetes(dependsOn: [undeployUserService, unddeployRssService, undeployOrchestratorService, undeployDatabase])


task createNamespaceProduction(type: Exec) {
    commandLine 'kubectl', 'create', 'namespace', 'production'
}

task createNamespaceTest(type: Exec) {
    commandLine 'kubectl', 'create', 'namespace', 'test'
}

task deleteNamespaceProduction(type: Exec){
    commandLine 'kubectl', 'delete', 'namespace', 'production'
}
task deleteNamespaceTest(type: Exec){
    commandLine 'kubectl', 'delete', 'namespace', 'test'
}

task createNamespaces(dependsOn: [createNamespaceTest, createNamespaceProduction])
task deleteNamespaces(dependsOn: [deleteNamespaceTest, deleteNamespaceProduction])

deployToKubernetes.mustRunAfter createNamespaces
deleteNamespaces.mustRunAfter undeployFromKubernetes

task spinUpKubernetesCluster(dependsOn: [createNamespaces, deployToKubernetes])
task tearDownKubernetesCluster(dependsOn: [deleteNamespaces, undeployFromKubernetes])
